// Mocks generated by Mockito 5.4.4 from annotations
// in foodtracker/test/4infrastructure/repositories/food_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:foodtracker/3domain/entitites/FoodEntity.dart' as _i2;
import 'package:foodtracker/3domain/entitites/LogEntity.dart' as _i3;
import 'package:foodtracker/3domain/entitites/MealEntity.dart' as _i7;
import 'package:foodtracker/4infrastructure/datasources/FoodLocalDataSource.dart'
    as _i6;
import 'package:foodtracker/4infrastructure/datasources/FoodRemoteDataSource.dart'
    as _i4;
import 'package:foodtracker/4infrastructure/models/FoodModel.dart' as _i8;
import 'package:foodtracker/4infrastructure/models/LogModel.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFoodEntity_0 extends _i1.SmartFake implements _i2.FoodEntity {
  _FakeFoodEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogEntity_1 extends _i1.SmartFake implements _i3.LogEntity {
  _FakeLogEntity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FoodRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodRemoteDataSource extends _i1.Mock
    implements _i4.FoodRemoteDataSource {
  MockFoodRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.FoodEntity> getFoodFromApi(String? ean) => (super.noSuchMethod(
        Invocation.method(
          #getFoodFromApi,
          [ean],
        ),
        returnValue: _i5.Future<_i2.FoodEntity>.value(_FakeFoodEntity_0(
          this,
          Invocation.method(
            #getFoodFromApi,
            [ean],
          ),
        )),
      ) as _i5.Future<_i2.FoodEntity>);

  @override
  _i5.Future<List<_i2.FoodEntity>> getFoodListFromApi(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFoodListFromApi,
          [name],
        ),
        returnValue: _i5.Future<List<_i2.FoodEntity>>.value(<_i2.FoodEntity>[]),
      ) as _i5.Future<List<_i2.FoodEntity>>);
}

/// A class which mocks [FoodLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodLocalDataSource extends _i1.Mock
    implements _i6.FoodLocalDataSource {
  MockFoodLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.FoodEntity> getFood(String? ean) => (super.noSuchMethod(
        Invocation.method(
          #getFood,
          [ean],
        ),
        returnValue: _i5.Future<_i2.FoodEntity>.value(_FakeFoodEntity_0(
          this,
          Invocation.method(
            #getFood,
            [ean],
          ),
        )),
      ) as _i5.Future<_i2.FoodEntity>);

  @override
  _i5.Future<List<_i2.FoodEntity>> getFoodList(String? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFoodList,
          [date],
        ),
        returnValue: _i5.Future<List<_i2.FoodEntity>>.value(<_i2.FoodEntity>[]),
      ) as _i5.Future<List<_i2.FoodEntity>>);

  @override
  _i5.Future<_i3.LogEntity> getLog(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getLog,
          [id],
        ),
        returnValue: _i5.Future<_i3.LogEntity>.value(_FakeLogEntity_1(
          this,
          Invocation.method(
            #getLog,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.LogEntity>);

  @override
  _i5.Future<List<_i3.LogEntity>> getLogList() => (super.noSuchMethod(
        Invocation.method(
          #getLogList,
          [],
        ),
        returnValue: _i5.Future<List<_i3.LogEntity>>.value(<_i3.LogEntity>[]),
      ) as _i5.Future<List<_i3.LogEntity>>);

  @override
  _i5.Future<List<_i7.MealEntity>> getMealList(String? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMealList,
          [date],
        ),
        returnValue: _i5.Future<List<_i7.MealEntity>>.value(<_i7.MealEntity>[]),
      ) as _i5.Future<List<_i7.MealEntity>>);

  @override
  _i5.Future<int> insertToFoodTable(_i8.FoodModel? foodModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertToFoodTable,
          [foodModel],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> insertToLogTable(_i9.LogModel? logModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertToLogTable,
          [logModel],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> updateFoodInTable(_i8.FoodModel? foodModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFoodInTable,
          [foodModel],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> updateLogInTable(_i9.LogModel? logModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLogInTable,
          [logModel],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> deleteLogInTable(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteLogInTable,
          [id],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> updateFoodWithSource() => (super.noSuchMethod(
        Invocation.method(
          #updateFoodWithSource,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
